// tiktok.js

const { cmd } = require('../command');
const TikTokAPI = require('tiktok-api');
const TikTok = new TikTokAPI();

let searchCache = {};

// Helper function to handle the user's choice and download
async function handleDownload(conn, from, mek, url, type, data) {
    try {
        let down, downloadUrl, fileName;

        // Function to send status updates to the user
        const sendStatusUpdate = async (message) => {
            await conn.sendMessage(from, { text: message }, { quoted: mek });
        };

        await sendStatusUpdate("Checking the link...");

        // Get TikTok video URL
        down = await TikTok.getVideo(url);
        downloadUrl = down.video_url;
        fileName = `${data.title}.${type}`;

        await sendStatusUpdate("Downloading...");

        // Send media
        if (type === 'audio' || type === 'video') {
            await conn.sendMessage(from, { [type]: { url: downloadUrl }, mimetype: type === 'audio' ? "audio/mpeg" : "video/mp4" }, { quoted: mek });
        } else if (type === 'document') {
            await conn.sendMessage(from, { document: { url: downloadUrl }, mimetype: type === 'audio' ? "audio/mpeg" : "video/mp4", fileName, caption: "♻️ *~Generated by Chuti_Yakshani-MD~* ♻️" }, { quoted: mek });
        }

        await sendStatusUpdate("Downloaded ✅");
    } catch (e) {
        await sendStatusUpdate(`An error occurred: ${e.message}`);
        console.log(e);
    }
}

// Register the 'tiktok' command
cmd({
    pattern: "tiktok",
    desc: "Download TikTok videos",
    category: "download",
    filename: __filename
}, async (conn, mek, m, { from, quoted, body, q, reply }) => {
    try {
        if (!q) return reply("Please provide the TikTok video URL.");

        // Fetch video details from TikTok
        const data = await TikTok.getVideo(q);
        const url = data.video_url;

        // Cache search result
        searchCache[from] = { url, data, type: 'video' };

        let desc = `
👹️ *_Chuti_Yakshani-MD TikTok Downloader_* 👹️

*Title:* ${data.title}

*Description:* ${data.description}

*Duration:* ${data.duration}

*Uploaded:* ${data.uploaded}

*Views:* ${data.views}

Please reply with:

    *.01* to download as video
    *.02* to download as document

♻️ *~Generated by Chuti_Yakshani-MD~* ♻️
        `;

        // Send video details with thumbnail and ask for a choice
        await conn.sendMessage(from, { image: { url: data.thumbnail }, caption: desc }, { quoted: mek });

    } catch (e) {
        console.log(e);
        reply(`${e}`);
    }
});

// Register the '01' command for video
cmd({
    pattern: "01",
    desc: "Download the last searched TikTok video",
    category: "subdownload",
    filename: __filename
}, async (conn, mek, m, { from, quoted, reply }) => {
    const cachedData = searchCache[from];
    if (cachedData) {
        const type = cachedData.type;
        await handleDownload(conn, from, mek, cachedData.url, type, cachedData.data);
    } else {
        reply("No recent media found. Please use the 'tiktok' command first.");
    }
});

// Register the '02' command for downloading as a document
cmd({
    pattern: "02",
    desc: "Download the last searched TikTok video as a document",
    category: "subdownload",
    filename: __filename
}, async (conn, mek, m, { from, quoted, reply }) => {
    const cachedData = searchCache[from];
    if (cachedData) {
        await handleDownload(conn, from, mek, cachedData.url, 'document', cachedData.data);
    } else {
        reply("No recent media found. Please use the 'tiktok' command first.");
    }
});
